// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameMsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameMsg_2eproto;
class BroadCast;
struct BroadCastDefaultTypeInternal;
extern BroadCastDefaultTypeInternal _BroadCast_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class SyncPid;
struct SyncPidDefaultTypeInternal;
extern SyncPidDefaultTypeInternal _SyncPid_default_instance_;
class SyncPidResponse;
struct SyncPidResponseDefaultTypeInternal;
extern SyncPidResponseDefaultTypeInternal _SyncPidResponse_default_instance_;
class SyncPid_A;
struct SyncPid_ADefaultTypeInternal;
extern SyncPid_ADefaultTypeInternal _SyncPid_A_default_instance_;
class SyncPlayers;
struct SyncPlayersDefaultTypeInternal;
extern SyncPlayersDefaultTypeInternal _SyncPlayers_default_instance_;
class Talk;
struct TalkDefaultTypeInternal;
extern TalkDefaultTypeInternal _Talk_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BroadCast* Arena::CreateMaybeMessage<::BroadCast>(Arena*);
template<> ::Player* Arena::CreateMaybeMessage<::Player>(Arena*);
template<> ::Position* Arena::CreateMaybeMessage<::Position>(Arena*);
template<> ::SyncPid* Arena::CreateMaybeMessage<::SyncPid>(Arena*);
template<> ::SyncPidResponse* Arena::CreateMaybeMessage<::SyncPidResponse>(Arena*);
template<> ::SyncPid_A* Arena::CreateMaybeMessage<::SyncPid_A>(Arena*);
template<> ::SyncPlayers* Arena::CreateMaybeMessage<::SyncPlayers>(Arena*);
template<> ::Talk* Arena::CreateMaybeMessage<::Talk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MessageID : int {
  MSG_NONE = 0,
  MSG_SYNC_PID = 1,
  MSG_TALK = 2,
  MSG_POSITION = 3,
  MSG_BROADCAST = 200,
  MSG_SYNCPID = 201,
  MSG_SYNC_PLAYERS = 202,
  MSG_LOGIN_REQUEST = 1001,
  MSG_LOGIN_REPLY = 1002,
  MessageID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageID_IsValid(int value);
constexpr MessageID MessageID_MIN = MSG_NONE;
constexpr MessageID MessageID_MAX = MSG_LOGIN_REPLY;
constexpr int MessageID_ARRAYSIZE = MessageID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageID_descriptor();
template<typename T>
inline const std::string& MessageID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageID_descriptor(), enum_t_value);
}
inline bool MessageID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageID>(
    MessageID_descriptor(), name, value);
}
enum Status : int {
  OK = 0,
  ERROR = 1,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = OK;
constexpr Status Status_MAX = ERROR;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class SyncPid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncPid) */ {
 public:
  inline SyncPid() : SyncPid(nullptr) {}
  ~SyncPid() override;
  explicit constexpr SyncPid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPid(const SyncPid& from);
  SyncPid(SyncPid&& from) noexcept
    : SyncPid() {
    *this = ::std::move(from);
  }

  inline SyncPid& operator=(const SyncPid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPid& operator=(SyncPid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPid* internal_default_instance() {
    return reinterpret_cast<const SyncPid*>(
               &_SyncPid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncPid& a, SyncPid& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncPid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncPid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncPid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncPid";
  }
  protected:
  explicit SyncPid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 Pid = 1;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncPid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int32_t pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameMsg_2eproto;
};
// -------------------------------------------------------------------

class SyncPidResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncPidResponse) */ {
 public:
  inline SyncPidResponse() : SyncPidResponse(nullptr) {}
  ~SyncPidResponse() override;
  explicit constexpr SyncPidResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPidResponse(const SyncPidResponse& from);
  SyncPidResponse(SyncPidResponse&& from) noexcept
    : SyncPidResponse() {
    *this = ::std::move(from);
  }

  inline SyncPidResponse& operator=(const SyncPidResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPidResponse& operator=(SyncPidResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPidResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPidResponse* internal_default_instance() {
    return reinterpret_cast<const SyncPidResponse*>(
               &_SyncPidResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyncPidResponse& a, SyncPidResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPidResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPidResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPidResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncPidResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncPidResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncPidResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPidResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncPidResponse";
  }
  protected:
  explicit SyncPidResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
    kStateFieldNumber = 3,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_NODISCARD std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // .Status state = 3;
  void clear_state();
  ::Status state() const;
  void set_state(::Status value);
  private:
  ::Status _internal_state() const;
  void _internal_set_state(::Status value);
  public:

  // @@protoc_insertion_point(class_scope:SyncPidResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  int32_t ret_code_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameMsg_2eproto;
};
// -------------------------------------------------------------------

class Talk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Talk) */ {
 public:
  inline Talk() : Talk(nullptr) {}
  ~Talk() override;
  explicit constexpr Talk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talk(const Talk& from);
  Talk(Talk&& from) noexcept
    : Talk() {
    *this = ::std::move(from);
  }

  inline Talk& operator=(const Talk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talk& operator=(Talk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talk* internal_default_instance() {
    return reinterpret_cast<const Talk*>(
               &_Talk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Talk& a, Talk& b) {
    a.Swap(&b);
  }
  inline void Swap(Talk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Talk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Talk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Talk";
  }
  protected:
  explicit Talk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string Content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:Talk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameMsg_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kVFieldNumber = 4,
  };
  // float X = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float V = 4;
  void clear_v();
  float v() const;
  void set_v(float value);
  private:
  float _internal_v() const;
  void _internal_set_v(float value);
  public:

  // @@protoc_insertion_point(class_scope:Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameMsg_2eproto;
};
// -------------------------------------------------------------------

class BroadCast final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BroadCast) */ {
 public:
  inline BroadCast() : BroadCast(nullptr) {}
  ~BroadCast() override;
  explicit constexpr BroadCast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadCast(const BroadCast& from);
  BroadCast(BroadCast&& from) noexcept
    : BroadCast() {
    *this = ::std::move(from);
  }

  inline BroadCast& operator=(const BroadCast& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadCast& operator=(BroadCast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadCast& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kContent = 3,
    kP = 4,
    kActionData = 5,
    DATA_NOT_SET = 0,
  };

  static inline const BroadCast* internal_default_instance() {
    return reinterpret_cast<const BroadCast*>(
               &_BroadCast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BroadCast& a, BroadCast& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadCast* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadCast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadCast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadCast>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadCast& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BroadCast& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadCast* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BroadCast";
  }
  protected:
  explicit BroadCast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kTpFieldNumber = 2,
    kContentFieldNumber = 3,
    kPFieldNumber = 4,
    kActionDataFieldNumber = 5,
  };
  // int32 Pid = 1;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // int32 Tp = 2;
  void clear_tp();
  int32_t tp() const;
  void set_tp(int32_t value);
  private:
  int32_t _internal_tp() const;
  void _internal_set_tp(int32_t value);
  public:

  // string Content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .Position P = 4;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::Position& p() const;
  PROTOBUF_NODISCARD ::Position* release_p();
  ::Position* mutable_p();
  void set_allocated_p(::Position* p);
  private:
  const ::Position& _internal_p() const;
  ::Position* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::Position* p);
  ::Position* unsafe_arena_release_p();

  // int32 ActionData = 5;
  bool has_actiondata() const;
  private:
  bool _internal_has_actiondata() const;
  public:
  void clear_actiondata();
  int32_t actiondata() const;
  void set_actiondata(int32_t value);
  private:
  int32_t _internal_actiondata() const;
  void _internal_set_actiondata(int32_t value);
  public:

  void clear_Data();
  DataCase Data_case() const;
  // @@protoc_insertion_point(class_scope:BroadCast)
 private:
  class _Internal;
  void set_has_content();
  void set_has_p();
  void set_has_actiondata();

  inline bool has_Data() const;
  inline void clear_has_Data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t pid_;
  int32_t tp_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::Position* p_;
    int32_t actiondata_;
  } Data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_GameMsg_2eproto;
};
// -------------------------------------------------------------------

class SyncPid_A final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncPid_A) */ {
 public:
  inline SyncPid_A() : SyncPid_A(nullptr) {}
  ~SyncPid_A() override;
  explicit constexpr SyncPid_A(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPid_A(const SyncPid_A& from);
  SyncPid_A(SyncPid_A&& from) noexcept
    : SyncPid_A() {
    *this = ::std::move(from);
  }

  inline SyncPid_A& operator=(const SyncPid_A& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPid_A& operator=(SyncPid_A&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPid_A& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPid_A* internal_default_instance() {
    return reinterpret_cast<const SyncPid_A*>(
               &_SyncPid_A_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SyncPid_A& a, SyncPid_A& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPid_A* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPid_A* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPid_A* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncPid_A>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncPid_A& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncPid_A& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPid_A* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncPid_A";
  }
  protected:
  explicit SyncPid_A(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 Pid = 1;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncPid_A)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int32_t pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameMsg_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncPlayers) */ {
 public:
  inline SyncPlayers() : SyncPlayers(nullptr) {}
  ~SyncPlayers() override;
  explicit constexpr SyncPlayers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayers(const SyncPlayers& from);
  SyncPlayers(SyncPlayers&& from) noexcept
    : SyncPlayers() {
    *this = ::std::move(from);
  }

  inline SyncPlayers& operator=(const SyncPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayers& operator=(SyncPlayers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayers& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayers* internal_default_instance() {
    return reinterpret_cast<const SyncPlayers*>(
               &_SyncPlayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SyncPlayers& a, SyncPlayers& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPlayers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncPlayers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncPlayers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncPlayers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncPlayers";
  }
  protected:
  explicit SyncPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPsFieldNumber = 1,
  };
  // repeated .Player ps = 1;
  int ps_size() const;
  private:
  int _internal_ps_size() const;
  public:
  void clear_ps();
  ::Player* mutable_ps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player >*
      mutable_ps();
  private:
  const ::Player& _internal_ps(int index) const;
  ::Player* _internal_add_ps();
  public:
  const ::Player& ps(int index) const;
  ::Player* add_ps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player >&
      ps() const;

  // @@protoc_insertion_point(class_scope:SyncPlayers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player > ps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameMsg_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // .Position P = 2;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::Position& p() const;
  PROTOBUF_NODISCARD ::Position* release_p();
  ::Position* mutable_p();
  void set_allocated_p(::Position* p);
  private:
  const ::Position& _internal_p() const;
  ::Position* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::Position* p);
  ::Position* unsafe_arena_release_p();

  // int32 Pid = 1;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Position* p_;
  int32_t pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameMsg_2eproto;
};
// ===================================================================

class Login_Stub;

class Login : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Login() {};
 public:
  virtual ~Login();

  typedef Login_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void makeLogin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SyncPid* request,
                       ::SyncPidResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Login);
};

class Login_Stub : public Login {
 public:
  Login_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Login_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Login_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Login ------------------------------------------

  void makeLogin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::SyncPid* request,
                       ::SyncPidResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Login_Stub);
};


// ===================================================================

static const int kMsgIDFieldNumber = 50002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::MessageID, ::MessageID_IsValid>, 14, false >
  MsgID;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncPid

// int32 Pid = 1;
inline void SyncPid::clear_pid() {
  pid_ = 0;
}
inline int32_t SyncPid::_internal_pid() const {
  return pid_;
}
inline int32_t SyncPid::pid() const {
  // @@protoc_insertion_point(field_get:SyncPid.Pid)
  return _internal_pid();
}
inline void SyncPid::_internal_set_pid(int32_t value) {
  
  pid_ = value;
}
inline void SyncPid::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:SyncPid.Pid)
}

// string username = 2;
inline void SyncPid::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& SyncPid::username() const {
  // @@protoc_insertion_point(field_get:SyncPid.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncPid::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncPid.username)
}
inline std::string* SyncPid::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:SyncPid.username)
  return _s;
}
inline const std::string& SyncPid::_internal_username() const {
  return username_.Get();
}
inline void SyncPid::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncPid::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncPid::release_username() {
  // @@protoc_insertion_point(field_release:SyncPid.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncPid::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncPid.username)
}

// -------------------------------------------------------------------

// SyncPidResponse

// int32 ret_code = 1;
inline void SyncPidResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t SyncPidResponse::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t SyncPidResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:SyncPidResponse.ret_code)
  return _internal_ret_code();
}
inline void SyncPidResponse::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void SyncPidResponse::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:SyncPidResponse.ret_code)
}

// string res_info = 2;
inline void SyncPidResponse::clear_res_info() {
  res_info_.ClearToEmpty();
}
inline const std::string& SyncPidResponse::res_info() const {
  // @@protoc_insertion_point(field_get:SyncPidResponse.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncPidResponse::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncPidResponse.res_info)
}
inline std::string* SyncPidResponse::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:SyncPidResponse.res_info)
  return _s;
}
inline const std::string& SyncPidResponse::_internal_res_info() const {
  return res_info_.Get();
}
inline void SyncPidResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncPidResponse::_internal_mutable_res_info() {
  
  return res_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncPidResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:SyncPidResponse.res_info)
  return res_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncPidResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (res_info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    res_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncPidResponse.res_info)
}

// .Status state = 3;
inline void SyncPidResponse::clear_state() {
  state_ = 0;
}
inline ::Status SyncPidResponse::_internal_state() const {
  return static_cast< ::Status >(state_);
}
inline ::Status SyncPidResponse::state() const {
  // @@protoc_insertion_point(field_get:SyncPidResponse.state)
  return _internal_state();
}
inline void SyncPidResponse::_internal_set_state(::Status value) {
  
  state_ = value;
}
inline void SyncPidResponse::set_state(::Status value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncPidResponse.state)
}

// -------------------------------------------------------------------

// Talk

// string Content = 1;
inline void Talk::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Talk::content() const {
  // @@protoc_insertion_point(field_get:Talk.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Talk::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Talk.Content)
}
inline std::string* Talk::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Talk.Content)
  return _s;
}
inline const std::string& Talk::_internal_content() const {
  return content_.Get();
}
inline void Talk::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Talk::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Talk::release_content() {
  // @@protoc_insertion_point(field_release:Talk.Content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Talk::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Talk.Content)
}

// -------------------------------------------------------------------

// Position

// float X = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::_internal_x() const {
  return x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:Position.X)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Position.X)
}

// float Y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::_internal_y() const {
  return y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:Position.Y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Position.Y)
}

// float Z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::_internal_z() const {
  return z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:Position.Z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Position.Z)
}

// float V = 4;
inline void Position::clear_v() {
  v_ = 0;
}
inline float Position::_internal_v() const {
  return v_;
}
inline float Position::v() const {
  // @@protoc_insertion_point(field_get:Position.V)
  return _internal_v();
}
inline void Position::_internal_set_v(float value) {
  
  v_ = value;
}
inline void Position::set_v(float value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:Position.V)
}

// -------------------------------------------------------------------

// BroadCast

// int32 Pid = 1;
inline void BroadCast::clear_pid() {
  pid_ = 0;
}
inline int32_t BroadCast::_internal_pid() const {
  return pid_;
}
inline int32_t BroadCast::pid() const {
  // @@protoc_insertion_point(field_get:BroadCast.Pid)
  return _internal_pid();
}
inline void BroadCast::_internal_set_pid(int32_t value) {
  
  pid_ = value;
}
inline void BroadCast::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:BroadCast.Pid)
}

// int32 Tp = 2;
inline void BroadCast::clear_tp() {
  tp_ = 0;
}
inline int32_t BroadCast::_internal_tp() const {
  return tp_;
}
inline int32_t BroadCast::tp() const {
  // @@protoc_insertion_point(field_get:BroadCast.Tp)
  return _internal_tp();
}
inline void BroadCast::_internal_set_tp(int32_t value) {
  
  tp_ = value;
}
inline void BroadCast::set_tp(int32_t value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:BroadCast.Tp)
}

// string Content = 3;
inline bool BroadCast::_internal_has_content() const {
  return Data_case() == kContent;
}
inline bool BroadCast::has_content() const {
  return _internal_has_content();
}
inline void BroadCast::set_has_content() {
  _oneof_case_[0] = kContent;
}
inline void BroadCast::clear_content() {
  if (_internal_has_content()) {
    Data_.content_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_Data();
  }
}
inline const std::string& BroadCast::content() const {
  // @@protoc_insertion_point(field_get:BroadCast.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline void BroadCast::set_content(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BroadCast.Content)
}
inline std::string* BroadCast::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:BroadCast.Content)
  return _s;
}
inline const std::string& BroadCast::_internal_content() const {
  if (_internal_has_content()) {
    return Data_.content_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BroadCast::_internal_set_content(const std::string& value) {
  if (!_internal_has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BroadCast::_internal_mutable_content() {
  if (!_internal_has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Data_.content_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BroadCast::release_content() {
  // @@protoc_insertion_point(field_release:BroadCast.Content)
  if (_internal_has_content()) {
    clear_has_Data();
    return Data_.content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void BroadCast::set_allocated_content(std::string* content) {
  if (has_Data()) {
    clear_Data();
  }
  if (content != nullptr) {
    set_has_content();
    Data_.content_.UnsafeSetDefault(content);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(content);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:BroadCast.Content)
}

// .Position P = 4;
inline bool BroadCast::_internal_has_p() const {
  return Data_case() == kP;
}
inline bool BroadCast::has_p() const {
  return _internal_has_p();
}
inline void BroadCast::set_has_p() {
  _oneof_case_[0] = kP;
}
inline void BroadCast::clear_p() {
  if (_internal_has_p()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Data_.p_;
    }
    clear_has_Data();
  }
}
inline ::Position* BroadCast::release_p() {
  // @@protoc_insertion_point(field_release:BroadCast.P)
  if (_internal_has_p()) {
    clear_has_Data();
      ::Position* temp = Data_.p_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Data_.p_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Position& BroadCast::_internal_p() const {
  return _internal_has_p()
      ? *Data_.p_
      : reinterpret_cast< ::Position&>(::_Position_default_instance_);
}
inline const ::Position& BroadCast::p() const {
  // @@protoc_insertion_point(field_get:BroadCast.P)
  return _internal_p();
}
inline ::Position* BroadCast::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BroadCast.P)
  if (_internal_has_p()) {
    clear_has_Data();
    ::Position* temp = Data_.p_;
    Data_.p_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BroadCast::unsafe_arena_set_allocated_p(::Position* p) {
  clear_Data();
  if (p) {
    set_has_p();
    Data_.p_ = p;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BroadCast.P)
}
inline ::Position* BroadCast::_internal_mutable_p() {
  if (!_internal_has_p()) {
    clear_Data();
    set_has_p();
    Data_.p_ = CreateMaybeMessage< ::Position >(GetArenaForAllocation());
  }
  return Data_.p_;
}
inline ::Position* BroadCast::mutable_p() {
  ::Position* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:BroadCast.P)
  return _msg;
}

// int32 ActionData = 5;
inline bool BroadCast::_internal_has_actiondata() const {
  return Data_case() == kActionData;
}
inline bool BroadCast::has_actiondata() const {
  return _internal_has_actiondata();
}
inline void BroadCast::set_has_actiondata() {
  _oneof_case_[0] = kActionData;
}
inline void BroadCast::clear_actiondata() {
  if (_internal_has_actiondata()) {
    Data_.actiondata_ = 0;
    clear_has_Data();
  }
}
inline int32_t BroadCast::_internal_actiondata() const {
  if (_internal_has_actiondata()) {
    return Data_.actiondata_;
  }
  return 0;
}
inline void BroadCast::_internal_set_actiondata(int32_t value) {
  if (!_internal_has_actiondata()) {
    clear_Data();
    set_has_actiondata();
  }
  Data_.actiondata_ = value;
}
inline int32_t BroadCast::actiondata() const {
  // @@protoc_insertion_point(field_get:BroadCast.ActionData)
  return _internal_actiondata();
}
inline void BroadCast::set_actiondata(int32_t value) {
  _internal_set_actiondata(value);
  // @@protoc_insertion_point(field_set:BroadCast.ActionData)
}

inline bool BroadCast::has_Data() const {
  return Data_case() != DATA_NOT_SET;
}
inline void BroadCast::clear_has_Data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline BroadCast::DataCase BroadCast::Data_case() const {
  return BroadCast::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SyncPid_A

// int32 Pid = 1;
inline void SyncPid_A::clear_pid() {
  pid_ = 0;
}
inline int32_t SyncPid_A::_internal_pid() const {
  return pid_;
}
inline int32_t SyncPid_A::pid() const {
  // @@protoc_insertion_point(field_get:SyncPid_A.Pid)
  return _internal_pid();
}
inline void SyncPid_A::_internal_set_pid(int32_t value) {
  
  pid_ = value;
}
inline void SyncPid_A::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:SyncPid_A.Pid)
}

// string username = 2;
inline void SyncPid_A::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& SyncPid_A::username() const {
  // @@protoc_insertion_point(field_get:SyncPid_A.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncPid_A::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncPid_A.username)
}
inline std::string* SyncPid_A::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:SyncPid_A.username)
  return _s;
}
inline const std::string& SyncPid_A::_internal_username() const {
  return username_.Get();
}
inline void SyncPid_A::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncPid_A::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncPid_A::release_username() {
  // @@protoc_insertion_point(field_release:SyncPid_A.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncPid_A::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncPid_A.username)
}

// -------------------------------------------------------------------

// SyncPlayers

// repeated .Player ps = 1;
inline int SyncPlayers::_internal_ps_size() const {
  return ps_.size();
}
inline int SyncPlayers::ps_size() const {
  return _internal_ps_size();
}
inline void SyncPlayers::clear_ps() {
  ps_.Clear();
}
inline ::Player* SyncPlayers::mutable_ps(int index) {
  // @@protoc_insertion_point(field_mutable:SyncPlayers.ps)
  return ps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player >*
SyncPlayers::mutable_ps() {
  // @@protoc_insertion_point(field_mutable_list:SyncPlayers.ps)
  return &ps_;
}
inline const ::Player& SyncPlayers::_internal_ps(int index) const {
  return ps_.Get(index);
}
inline const ::Player& SyncPlayers::ps(int index) const {
  // @@protoc_insertion_point(field_get:SyncPlayers.ps)
  return _internal_ps(index);
}
inline ::Player* SyncPlayers::_internal_add_ps() {
  return ps_.Add();
}
inline ::Player* SyncPlayers::add_ps() {
  ::Player* _add = _internal_add_ps();
  // @@protoc_insertion_point(field_add:SyncPlayers.ps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player >&
SyncPlayers::ps() const {
  // @@protoc_insertion_point(field_list:SyncPlayers.ps)
  return ps_;
}

// -------------------------------------------------------------------

// Player

// int32 Pid = 1;
inline void Player::clear_pid() {
  pid_ = 0;
}
inline int32_t Player::_internal_pid() const {
  return pid_;
}
inline int32_t Player::pid() const {
  // @@protoc_insertion_point(field_get:Player.Pid)
  return _internal_pid();
}
inline void Player::_internal_set_pid(int32_t value) {
  
  pid_ = value;
}
inline void Player::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:Player.Pid)
}

// .Position P = 2;
inline bool Player::_internal_has_p() const {
  return this != internal_default_instance() && p_ != nullptr;
}
inline bool Player::has_p() const {
  return _internal_has_p();
}
inline void Player::clear_p() {
  if (GetArenaForAllocation() == nullptr && p_ != nullptr) {
    delete p_;
  }
  p_ = nullptr;
}
inline const ::Position& Player::_internal_p() const {
  const ::Position* p = p_;
  return p != nullptr ? *p : reinterpret_cast<const ::Position&>(
      ::_Position_default_instance_);
}
inline const ::Position& Player::p() const {
  // @@protoc_insertion_point(field_get:Player.P)
  return _internal_p();
}
inline void Player::unsafe_arena_set_allocated_p(
    ::Position* p) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(p_);
  }
  p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.P)
}
inline ::Position* Player::release_p() {
  
  ::Position* temp = p_;
  p_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Position* Player::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_release:Player.P)
  
  ::Position* temp = p_;
  p_ = nullptr;
  return temp;
}
inline ::Position* Player::_internal_mutable_p() {
  
  if (p_ == nullptr) {
    auto* p = CreateMaybeMessage<::Position>(GetArenaForAllocation());
    p_ = p;
  }
  return p_;
}
inline ::Position* Player::mutable_p() {
  ::Position* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:Player.P)
  return _msg;
}
inline void Player::set_allocated_p(::Position* p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete p_;
  }
  if (p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Position>::GetOwningArena(p);
    if (message_arena != submessage_arena) {
      p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  p_ = p;
  // @@protoc_insertion_point(field_set_allocated:Player.P)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MessageID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageID>() {
  return ::MessageID_descriptor();
}
template <> struct is_proto_enum< ::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Status>() {
  return ::Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameMsg_2eproto
